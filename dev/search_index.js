var documenterSearchIndex = {"docs":
[{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = ItPropFit","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [ItPropFit]","category":"page"},{"location":"reference/#ItPropFit.ArrayFactors","page":"Reference","title":"ItPropFit.ArrayFactors","text":"ArrayFactors(f)\n\nArray factors are defined such that the array's elements are their products: M[i, j, ..., l] = f[1][i] * f[2][j] * ... * f[3][l]\n\nsee also: ipf, margins\n\nFields\n\nf::Vector{Vector{<:Real}}: Vector of array factors\n\nExamples\n\njulia> AF = ArrayFactors([[1,2,3], [4,5]])\nFactors for array of size (3, 2):\n  1: [1, 2, 3]\n  2: [4, 5]\n\njulia> eltype(AF)\nInt64\n\njulia> Array(AF)\n3×2 Matrix{Int64}:\n  4   5\n  8  10\n 12  15\n\n\n\n\n\n","category":"type"},{"location":"reference/#ItPropFit.ipf-Tuple{AbstractArray{<:Real}, Vector{<:Vector{<:Real}}}","page":"Reference","title":"ItPropFit.ipf","text":"ipf(X, mar[; maxiter, tol])\n\nPerform iterative proportional fitting (factor method). The array (X) can be any number of dimensions, as long as the margins have the correct size. Will return the weights as an ArrayFactors object. \n\nsee also: ArrayFactors, margins\n\nArguments\n\nX::AbstractArray{<:Real}: Array to be adjusted\nmar::Vector{<:Vector{<:Real}}: Target margins\nmaxiter::Int=1000: Maximum number of iterations\ntol::Float64=1e-10: Factor change tolerance for convergence\n\nExamples\n\njulia> X = [40 30 20 10; 35 50 100 75; 30 80 70 120; 20 30 40 50]\njulia> u = [150, 300, 400, 150]\njulia> v = [200, 300, 400, 100]\njulia> AF = ipf(X, [u, v])\nFactors for array of size (4, 4):\n    1: [1.2513914546748504, 1.1069369933423092, 1.4659850061977997, 1.1146335537777001]\n    2: [1.2897345098410427, 1.2314947369488765, 1.4137981417470917, 0.305638354490167]\n\njulia> Array(AF) .* X\n4×4 Matrix{Float64}:\n 64.5585   46.2325   35.3843   3.82473\n 49.9679   68.1594  156.499   25.3742\n 56.7219  144.428   145.082   53.7673\n 28.7516   41.18     63.0347  17.0337\n\n\n\n\n\n","category":"method"},{"location":"reference/#ItPropFit.margins-Tuple{AbstractArray{<:Real}}","page":"Reference","title":"ItPropFit.margins","text":"margins(X)\n\nCompute the marginal sum totals for an array.\n\nArguments\n\nX::AbstractArray{<: Number}: array with any number of dimensions\n\nExamples\n\njulia> margins(reshape(1:12, 2, 3, 2))\n3-element Vector{Vector{Int64}}:\n [36, 42]\n [18, 26, 34]\n [21, 57]\n\n\n\n\n\n","category":"method"},{"location":"#ItPropFit","page":"Home","title":"ItPropFit","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ItPropFit: multidimensional iterative proportional fitting in Julia.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"X = [40 30 20 10; 35 50 100 75; 30 80 70 120; 20 30 40 50]\nu = [150, 300, 400, 150]\nv = [200, 300, 400, 100]\nAF = ipf(X, [u, v])\nArray(AF) .* X","category":"page"},{"location":"","page":"Home","title":"Home","text":"4×4 Matrix{Float64}:\n 64.5585   46.2325   35.3843   3.82473\n 49.9679   68.1594  156.499   25.3742\n 56.7219  144.428   145.082   53.7673\n 28.7516   41.18     63.0347  17.0337","category":"page"}]
}
